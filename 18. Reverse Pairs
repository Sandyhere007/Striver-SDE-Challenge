//we have to use merge sort with a modification as countPairs function

//int countPairs(vector<int> &arr, int low,int mid, int high){
//	int right  = mid+1;
//	int count = 0;
//	for(int i = low ; i<=mid ; i++){
//		while(right<=high && arr[i]>2*arr[right]){
//			right++;
//		}
//		count+=right - (mid+1);
//	}
//	return count;
//}

#include <bits/stdc++.h> 

void merge(vector<int> &arr, int low,int mid, int high){
	vector<int> temp;
	int i = low;
	int j = mid+1;
	while(i<= mid && j<=high ){
		if(arr[i]<arr[j]){
			temp.push_back(arr[i]);
			i++;
		}
		else{
			temp.push_back(arr[j]);
			j++;
		}
	}
	while(i<=mid){
		temp.push_back(arr[i]);
		i++;
	}
	while(j<=high){
		temp.push_back(arr[j]);
		j++;

	}
	for(int i = low ; i<= high ;i++){
		arr[i] = temp[i-low];
	}
}


int countPairs(vector<int> &arr, int low,int mid, int high){
	int right  = mid+1;
	int count = 0;
	for(int i = low ; i<=mid ; i++){
		while(right<=high && arr[i]>2*arr[right]){
			right++;
		}
		count+=right - (mid+1);
	}
	return count;
}

int mergeSort(vector<int> &arr, int low, int high){
	int count = 0;
	if(low>=high){
		return count;
	}
	int mid = (high+low)/2;
	count+=mergeSort(arr,low,mid);
	count+=mergeSort(arr,mid+1,high);
	count+=countPairs(arr, low , mid , high);
	merge(arr, low, mid, high);
	return count;

}

int reversePairs(vector<int> &arr, int n){
	// Write your code here.
	
	return mergeSort(arr,0,n-1);
}
