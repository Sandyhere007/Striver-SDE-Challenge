// optimal solution 
#include <bits/stdc++.h>

string fourSum(vector<int> arr, int target, int n) {
     vector<vector<int>> ans;
    // sort the given array:
    sort(arr.begin(), arr.end());
    //calculating the quadruplets:
    for (int i = 0; i < n; i++) {
        // avoid the duplicates while moving i:
        if (i > 0 && arr[i] == arr[i - 1]) continue;
        for (int j = i + 1; j < n; j++) {
            // avoid the duplicates while moving j:
            if (j > i + 1 && arr[j] == arr[j - 1]) continue;

            // 2 pointers:
            int k = j + 1;
            int l = n - 1;
            while (k < l) {
                long long sum = arr[i];
                sum += arr[j];
                sum += arr[k];
                sum += arr[l];
                if (sum == target) {
                    return "Yes";

                    //skip the duplicates:
                    while (k < l && arr[k] == arr[k - 1]) k++;
                    while (k < l && arr[l] == arr[l + 1]) l--;
                }
                else if (sum < target) k++;
                else l--;
            }
        }
    }

    return "No";
}

// hashmap solution
// #include <bits/stdc++.h>

// string fourSum(vector<int> arr, int target, int n) {
//     // Write your code here.
//     set<vector<int>> st;
//     for(int i = 0 ; i< n ; i++){
//         for(int j = i+1 ; j< n ; j++){
//             set<long long> hashset;
//             for(int k = j+1 ; k< n ; k++){
//                 long long sum = arr[i]+arr[j];
//                 sum+=arr[k];
//                 long long fourth = target - sum;
//                 if(hashset.find(fourth)!= hashset.end()){
//                     return "Yes";
//                 }

//                 hashset.insert(arr[k]);
//             }
//         }
//     }
// return "No";
// }
