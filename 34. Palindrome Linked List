#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

// Find middle node using slow and fast approach
// now reverse using slow->next
// Now traverse till slow!=NUL check if head->data is equal to slow->data
// takeaways 
// in reversing take pre and nex as NULL and loop for curr!=NULL
// Use the convention given in question well take care of variable names and ->

LinkedListNode<int>* reverse(LinkedListNode<int>* curr){
    LinkedListNode<int>* prev = NULL;
    LinkedListNode<int>* next = NULL;
    while(curr!=NULL){
        next= curr->next;
        curr->next = prev;
        prev = curr;
        curr= next;
    }
    return prev;
}

bool isPalindrome(LinkedListNode<int> *head) {
//     // Write your code here.
   if(head==NULL||head->next==NULL) return true;
    LinkedListNode<int>* slow = head;
    LinkedListNode<int>* fast = head;
    while(fast->next != NULL && fast->next->next!=NULL){
        slow=slow->next;
        fast = fast->next->next;
    }
    slow->next = reverse(slow->next);
    slow =  slow->next;
    LinkedListNode<int>* dummy =head;
    while(slow!=NULL){
        if(dummy->data!=slow->data) return false;
        dummy = dummy->next;
        slow= slow->next;
    }
    return true;
}



// Using extra data structure array;
// 1 traverse teh whole ll and store all elements in the array
// 2 check palindrome in array with the condition arr[i]== arr[n-1-i]
// and do not forget to use i<n/2 in for loop

// bool isPalindrome(LinkedListNode<int> *head) {
//     // Write your code here.
//     vector<int> arr;
//     while(head!=NULL){
//         arr.push_back(head->data);
//         head=head->next;
//     }
//     for(int i = 0 ; i< arr.size()/2;i++){
//         if(arr[i]!=arr[arr.size()-i-1]) return false;
//     }
//     return true;
// }
