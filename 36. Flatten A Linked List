/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

//recursively call for flatten of the ll
//on returning we call  merge function which merge the two ll(top to bottom ll)


TAKEAWAY 
be aware of pointer next and bottom/child
 Node* merge(Node* a , Node* b){
	Node* res = new Node(0);
	Node* temp  =res;
	while(a!=NULL && b!=NULL){
	if(a->data < b->data){
		res->child = a;
		res =res->child;
		a= a->child;
	}
	else{
		res->child = b;
		res = res->child;
		b= b->child;
	}
}
	if(a) res->child = a;
	else res->child = b;
	
	return temp->child;
 }

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(head==NULL || head->next==NULL) return head;

	Node* l2 = flattenLinkedList(head->next);
head->next = NULL;
	head= merge(head,l2);

	return head;
}
