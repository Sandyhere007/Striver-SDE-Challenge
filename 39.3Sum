#include <bits/stdc++.h> 

//Brute force O(n^3)
vector<vector<int>> findTriplets(vector<int>arr, int n, int K) {
	// Write your code here.
	long long sum = 0 ;

  sort(arr.begin(),arr.end());
  set<vector<int>> hashSet;
	for(int i =  0; i < n ; i++){
    for(int j = i+1 ; j < n ; j++){
      for(int k = j+1; k < n ; k++){
        if(arr[i]+arr[j]+arr[k]==K){
          vector<int> temp = {arr[i],arr[j],arr[k]};
          sort(temp.begin(),temp.end());
          hashSet.insert(temp);
        }
      }
    }
  }
  vector<vector<int>> res(hashSet.begin(),hashSet.end());
  
  return res;
}


// optimal two pointer
// vector<vector<int>> findTriplets(vector<int>arr, int n, int K) {
// 	// Write your code here.
// 	long long sum = 0 ;

//   sort(arr.begin(),arr.end());
//   set<vector<int>> hashSet;
// 	for(int i =  0; i < n-2 ; i++){
//     sum = arr[i];
//     int low = i+1;
//     int high = n-1;
//     while(low<high){
//       if(sum+arr[low]+arr[high] == K){
// 	    vector<int> temp ;
//       temp.push_back(arr[i]);
//       temp.push_back(arr[low]);
//       temp.push_back(arr[high]);
//       sort(temp.begin(), temp.end());
//       hashSet.insert(temp);
//       low++;
//       high--;
//       }
//       else if(sum+arr[low]+arr[high] < K){
//         low++;
//       }
//       else{
//         high--;
//       }
//     }

//   }
//    vector<vector<int>> res(hashSet.begin(),hashSet.end());
//         return res;
// }
