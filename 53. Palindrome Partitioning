// here we are going to partition only where there is a possibility of isPalindrome either in the left half or the right half
// we have to loop from index to n ans in every iteration we check if isPalindrome 
// means one is our partition we store that substring (from index mostly acting as start 
// and i which is acting as end ) in the path and as soon as we reach the ending index (s.size())
// we push it in the resultant array
// ans likely we get the palindromic partitions for all iterations recursively

#include <bits/stdc++.h> 

bool isPalindrome(int start , int end , string &s){
    while(start<=end){
        if(s[start++]!=s[end--]){
            return false;
        }
    }
    return true;
}



void solve(int ind , string &s ,  vector<vector<string>> &res , vector<string> path){
    if(ind == s.size()){
        res.push_back(path);
        return ;
    }

    for (int i = ind; i < s.size(); i++) {
        if(isPalindrome(ind ,i, s)){
            path.push_back(s.substr(ind , i - ind + 1));
            solve(i + 1 , s , res , path );
            path.pop_back();
        }
    }

}


vector<vector<string>> partition(string &s) 
{
    // Write your code here.
    vector<vector<string>> res;
    vector<string> path;
    solve(0, s , res , path);
    return res;
}
