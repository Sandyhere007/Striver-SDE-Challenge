#include<bits/stdc++.h>
class Queue {
    // Define the data members(if any) here.
    stack<int> input, output;
    
    public:
    Queue() {
        // Initialize your data structure here.
    }

    void enQueue(int val) {
        // Implement the enqueue() function.
       input.push(val);
    }

    int deQueue() {
        // Implement the dequeue() function.
         if(output.size()==0 && input.size()==0) return -1;
        if(!output.empty()){
            int temp = output.top();
            output.pop();
            return temp;
        }   
        else{
            while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
            int temp = output.top();
            output.pop();
            return temp;
        }
    }

    int peek() {
        // Implement the peek() function here.
       if(output.size()==0 && input.size()==0) return -1;
        if(!output.empty()){
            return output.top();
        }
        else{
             while(!input.empty()){
                output.push(input.top());
                input.pop();
            }
            return output.top();
        }
    }

    bool isEmpty() {
        // Implement the isEmpty() function here.
        if(output.size()==0 && input.size()==0) return true;
        else return false;
    }
};



// #include<bits/stdc++.h>
// class Queue {
//     // Define the data members(if any) here.
//     stack<int> s1, s2;
    
//     public:
//     Queue() {
//         // Initialize your data structure here.
//     }

//     void enQueue(int val) {
//         // Implement the enqueue() function.
//         while(!s1.empty()){
//             s2.push(s1.top());
//             s1.pop();
//         }
//         s1.push(val);
//         while(!s2.empty()){
//             s1.push(s2.top());
//             s2.pop();
//         }
//     }

//     int deQueue() {
//         // Implement the dequeue() function.
//         if(!s1.empty()){
//             int temp = s1.top();
//             s1.pop();
//             return temp;
//         }
//         else{
//             return -1;
//         }
//     }

//     int peek() {
//         // Implement the peek() function here.
//         return s1.top();
//     }

//     bool isEmpty() {
//         // Implement the isEmpty() function here.
//          return s1.empty();
//     }
// };
