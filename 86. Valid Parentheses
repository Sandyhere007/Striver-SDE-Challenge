bool isValidParenthesis(string expression)
{
    // Write your code here.
    stack<char> st;
    for(int i = 0 ; i < expression.length() ; i++){
        char ch = expression[i];
        if(ch == '(' || ch == '[' || ch == '{'){
            st.push(ch);
        }
        else{
            if(st.empty()) return false;
            char top = st.top();
            if((top == '(' && ch == ')' )|| (top == '[' && ch == ']') ||( top == '{' && ch == '}'))
            {
                st.pop();
            }
            else{
                return false;
            }
        }
    }
    if(st.empty()) return true;
    else return false;
}
