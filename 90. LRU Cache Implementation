// #include<bits/stdc++.h>

// using namespace std;

 

// class LRUCache

// {

//     int capacity;

//     unordered_map<int, list<pair<int,int>>::iterator> m;

//     list<pair<int,int>> l;

// public:

//     LRUCache(int capacity)

//     {

//         this->capacity = capacity;

//     }

 

//     int get(int key)

//     {

//         if(m.find(key) == m.end())

//             return -1;

//         else{

//             auto element = m[key];

//             int val = element->second;

//             l.erase(element);

 

//             l.push_front({key, val});

//             m[key] = l.begin();

//             return val;

//         }

//     }

 

//     void put(int key, int value)

//     {

//         if(m.find(key) != m.end()){

//             l.erase(m[key]);

//             m.erase(key);

//         }

 

//         if(capacity == l.size()){

//             pair<int, int> last = l.back();

//             l.erase(m[last.first]);

//             m.erase(last.first);

//         }

 

//         l.push_front({key, value});

//         m[key] = l.begin();

//     }

// };

 

#include<bits/stdc++.h>
class LRUCache
{
public:
    class Node{
        public:
            int key;
            int val;
            Node* next;
            Node* prev;

        Node(int key_,int val_){
            key = key_;
            val = val_;
           
        }
    };

    Node* head = new Node(-1,-1);
    Node* tail = new Node(-1,-1);

    int cap;
    unordered_map<int,Node*> m;

    LRUCache(int capacity)
    {
        // Write your code here
        cap = capacity;
        head->next = tail;
        tail->prev = head;

    }
    void addnode(Node* newNode){
        Node* temp = head->next;
        newNode->next= temp;
        temp->prev = newNode;
        head->next = newNode;
        newNode->prev = head;
    }
    void deletenode(Node* deletenode){
        Node* delnext = deletenode->next;
        Node* delprev = deletenode->prev;
        delprev->next = delnext;
        delnext->prev = delprev;
    }

    int get(int key)
    {
        if(m.find(key) == m.end()){
            return -1;
        }
        // Write your code here
        else {
          Node* resnode = m[key];
          int res = resnode->val;
          m.erase(key);
          delete (resnode);
          addnode(resnode);
          m[key] = head->next;
          return res;
        }
    }

    void put(int key, int value)
    {
        // Write your code here
        if(m.find(key) != m.end()){
            Node* existingnode = m[key];
            m.erase(key);
            deletenode(existingnode);
        }
        if(m.size()==cap){
            m.erase(tail->prev->key);
            deletenode(tail->prev);
        }
        addnode(new Node(key,value));
        m[key] = head->next;        
    }
};
